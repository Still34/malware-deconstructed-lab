import malduck
import argparse
import pathlib
import pefile


def decrypt_config(buffer: bytes) -> bytes:
    key_size = buffer[0]
    key = buffer[1 : key_size + 1]
    decrypted = malduck.rc4(key, buffer[1 + key_size :])
    return decrypted


def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument("input", help="RemcosRAT payload or resource config")
    args = argparser.parse_args()
    path = pathlib.Path(args.input)
    if not path.exists:
        raise FileNotFoundError(str(path))
    with open(path, "rb") as f:
        buffer = f.read()
    config_data = None
    try:
        # verify payload as pe
        pe = pefile.PE(data=buffer)
        if hasattr(pe, "DIRECTORY_ENTRY_RESOURCE"):
            for entry in pe.DIRECTORY_ENTRY_RESOURCE.entries:
                for sub_entry in entry.directory.entries:
                    if str(sub_entry.name) == "SETTINGS":
                        for resource_data in sub_entry.directory.entries:
                            data_entry = resource_data.data.struct
                            config_data = pe.get_data(
                                data_entry.OffsetToData, data_entry.Size
                            )
    except pefile.PEFormatError:
        # assume config
        config_data = buffer
    if config_data is not None:
        decrypted_data = decrypt_config(config_data)
        with open(str(path) + "-decrypted.bin", "wb") as f:
            f.write(decrypted_data)
    else:
        raise ValueError("Invalid file provided.")


if __name__ == "__main__":
    main()
